[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\Ruel\AppData\Local\Temp\idea1.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\Ruel\AppData\Local\Temp\idea1.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.6.2 (Amazon.com Inc. Java 11.0.24)
[debug] Load.defaultLoad until apply took 496.1649ms
[debug]           Load.loadUnit: plugins took 158.1737ms
[debug]           Load.loadUnit: defsScala took 0.6079ms
[debug] [Loading] Scanning directory D:\ict\practice scala JVM\zio-course\project
[debug]             Load.loadUnit: mkEval took 10.4388ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\ict\practice scala JVM\zio-course\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 28.8125 ms
[info] loading settings for project zio-course-build from idea1.sbt ...
[debug]               Load.resolveProject(zio-course-build) took 63.6294ms
[debug]             Load.loadTransitive: finalizeProject(Project(id zio-course-build, base: D:\ict\practice scala JVM\zio-course\project, plugins: List(<none>))) took 108.4227ms
[debug] [Loading] Done in D:\ict\practice scala JVM\zio-course\project, returning: (zio-course-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 3873.7209ms
[debug]           Load.loadUnit: cleanEvalClasses took 8.4452ms
[debug]         Load.loadUnit(file:/D:/ict/practice%20scala%20JVM/zio-course/project/, ...) took 4050.854ms
[debug]       Load.apply: load took 4304.6251ms
[debug]       Load.apply: resolveProjects took 5.9119ms
[debug]       Load.apply: finalTransforms took 85.5581ms
[debug]       Load.apply: config.delegates took 20.2947ms
[debug]       Load.apply: Def.make(settings)... took 787.6909ms
[debug]       Load.apply: structureIndex took 143.2442ms
[debug]       Load.apply: mkStreams took 8.1598ms
[info] loading project definition from D:\ict\practice scala JVM\zio-course\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 9518.203ms
[debug]     Load.loadUnit: defsScala took 0.0042ms
[debug] [Loading] Scanning directory D:\ict\practice scala JVM\zio-course
[debug]       Load.loadUnit: mkEval took 0.4198ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\ict\practice scala JVM\zio-course, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.3124 ms
[info] loading settings for project zio-course from build.sbt ...
[debug]         Load.resolveProject(zio-course) took 49.7017ms
[debug]       Load.loadTransitive: finalizeProject(Project(id zio-course, base: D:\ict\practice scala JVM\zio-course, plugins: List(<none>))) took 57.1132ms
[debug] [Loading] Done in D:\ict\practice scala JVM\zio-course, returning: (zio-course)
[debug]     Load.loadUnit: loadedProjectsRaw took 2751.9829ms
[debug]     Load.loadUnit: cleanEvalClasses took 27.7893ms
[debug]   Load.loadUnit(file:/D:/ict/practice%20scala%20JVM/zio-course/, ...) took 12303.9102ms
[debug] Load.apply: load took 12360.0451ms
[debug] Load.apply: resolveProjects took 0.2444ms
[debug] Load.apply: finalTransforms took 55.8107ms
[debug] Load.apply: config.delegates took 0.6097ms
[debug] Load.apply: Def.make(settings)... took 115.9496ms
[debug] Load.apply: structureIndex took 30.2656ms
[debug] Load.apply: mkStreams took 0.0023ms
[info] set current project to zio (in build file:/D:/ict/practice%20scala%20JVM/zio-course/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 49265 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 49265, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to zio (in build file:/D:/ict/practice%20scala%20JVM/zio-course/)
[debug] > Exec(idea-shell, None, None)
